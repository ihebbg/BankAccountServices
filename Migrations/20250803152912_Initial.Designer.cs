// <auto-generated />
using System;
using BankAccountServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankAccountServices.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250803152912_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BankAccountServices.Entities.AccountOperation", b =>
                {
                    b.Property<long>("IdAccountOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_account_operation");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<long>("IdBankAccount")
                        .HasColumnType("bigint")
                        .HasColumnName("id_bank_account");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("IdAccountOperation");

                    b.HasIndex("IdBankAccount");

                    b.ToTable("ba_acount_operation");
                });

            modelBuilder.Entity("BankAccountServices.Entities.BankAccount", b =>
                {
                    b.Property<long>("IdBankAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_bank_account");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("balance");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<long>("IdCustomer")
                        .HasColumnType("bigint")
                        .HasColumnName("id_customer");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("account_type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.HasKey("IdBankAccount");

                    b.HasIndex("IdCustomer");

                    b.ToTable("ba_bank_account");

                    b.HasDiscriminator<string>("account_type").HasValue("BankAccount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BankAccountServices.Entities.Customer", b =>
                {
                    b.Property<long>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_customer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("IdCustomer");

                    b.ToTable("ba_customer");
                });

            modelBuilder.Entity("BankAccountServices.Entities.CurrentAccount", b =>
                {
                    b.HasBaseType("BankAccountServices.Entities.BankAccount");

                    b.Property<double>("OverDraft")
                        .HasColumnType("double")
                        .HasColumnName("overdraft");

                    b.ToTable("ba_bank_account");

                    b.HasDiscriminator().HasValue("Current");
                });

            modelBuilder.Entity("BankAccountServices.Entities.SavingAccount", b =>
                {
                    b.HasBaseType("BankAccountServices.Entities.BankAccount");

                    b.Property<double>("InterestRate")
                        .HasColumnType("double")
                        .HasColumnName("interestrate");

                    b.ToTable("ba_bank_account");

                    b.HasDiscriminator().HasValue("Saving");
                });

            modelBuilder.Entity("BankAccountServices.Entities.AccountOperation", b =>
                {
                    b.HasOne("BankAccountServices.Entities.BankAccount", "BankAccount")
                        .WithMany("Operations")
                        .HasForeignKey("IdBankAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("BankAccountServices.Entities.BankAccount", b =>
                {
                    b.HasOne("BankAccountServices.Entities.Customer", "Customer")
                        .WithMany("BankAccounts")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BankAccountServices.Entities.BankAccount", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("BankAccountServices.Entities.Customer", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
